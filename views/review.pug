extends layout

block content
  style.
    .grid-container {
      display: grid;
      grid-template-columns: repeat(auto-fill, minmax(700px, 1fr));
      grid-gap: 50px;
      object-fit: cover;
      padding: 10px;
    }
    
    .grid-item {
      background-color: white;
      border: 1px solid rgba(255, 255, 255, 0.8);
      padding: 10px;
      font-size: 17px;
      border-radius:15px;
    }
    body, html {
      background: url("/images/orange.jpg") no-repeat center center fixed; 
      background-size: cover;
      height: 100%;
      height: 100%;
      margin: 0;
    }

    .bg {
      /* The image used */
      -background-image: url("/images/default1.jpg");

      /* Full height */
      height: 100%; 

      /* Center and scale the image nicely */
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
      text-align:center;
    }
    .h2-display {
      color: orange;
      text-align:center;
    }
    .jumbo-display {
      background-color: rgba(192,192,192,0.3);
      text-align:center;
    }
    p {
    display: block;
    -webkit-margin-before: 1em;
    -webkit-margin-after: 1em;
    -webkit-margin-start: 0px;
    -webkit-margin-end: 0px;
    }
    .nps-survey--rank-buttons {
    display: flex;
    padding: 5px;
    }
    .aui-buttons .aui-button~.aui-button {
        margin-left: 2px;
    }
    .aui-buttons {
        position: relative;
        margin-left:2px;
    }
    .aui-buttons {
        display: inline-block;
        font-size: 0;
    }
    .nps-survey .nps-survey--rank-buttons .nps-survey--rank-button {
        padding: 0 20px;
    }
    .aui-button:hover {
    background: #EBECF0;
    }
    .aui-button:active,.aui-button:focus{
      background: #ccc;
    }
    .aui-button,.aui-button:visited, a.aui-button {
        background: #f5f5f5;
        border: 1px solid #ccc;
        border-radius: 3.01px;
        color: #333;
        cursor: pointer;
        display: inline-block;
        font-family: inherit;
        font-size: 14px;
        margin: 0;
        padding: 0px 20px;
        vertical-align: baseline;
        white-space: nowrap;
    }
    .nps-survey .nps-survey--rank-buttons .nps-survey--rank-button.selected {
    background: #ccc;
    background: linear-gradient(to bottom,#ccc 0,#ddd 13%);
    }
    .selected {
    background: darkgrey;
    }
    .transitionAll {
    width: 200px;
    height: 30px;
    margin:auto;
    background: black;
    border-radius:0.25rem;
    -webkit-transition: width 1s; /* For Safari 3.1 to 6.0 */
    transition: width 1s;
    }

    .transitionAll:hover {
        width: 400px;
    }
    a.hello1:hover {
    color: black;
    text-decoration: none;
    }
    .hello1{
      color:white;
    }
    .hello1:hover {
    color: black;
    text-decoration: none;
    }
  #hello
  input#deptId(type='hidden', value=deptId)
  input#courseId(type='hidden', value=courseId)
  input#courseName(type='hidden', value=courseName)
  script.
    class ModalComponent extends React.Component {
    constructor(props) {
    super(props)
    this.state = Object.assign({}, { courseId: props.courseId, deptId: props.deptId });
    this.onChange = props.onChange1;
    }
    save(e) {
    //console.log(e);
    //console.log(this.refs.nameAdd.value);
    //$('#formReview').submit();
    }
    addReview(e) {
    e.preventDefault();
    $('#myModal').modal('toggle');
    var data = {
    courseTerm: this.refs.courseTerm.value,
    coursePros: this.refs.coursePros.value,
    courseCons: this.refs.courseCons.value,
    courseTips: this.refs.courseTips.value,
    courseLinks: this.refs.courseLinks.value,
    courseRating: this.refs.courseRating.value,
    courseFeedback: this.refs.courseFeedback.value,
    courseId: this.state.courseId,
    deptId: this.state.deptId
    }
    this.fetchReview(data);
    this.refs.coursePros.value = "";
    this.refs.courseCons.value = "";
    this.refs.courseTips.value = "";
    this.refs.courseLinks.value = "";
    this.refs.courseRating.value = "";
    this.refs.courseFeedback.value = "";
    }
    fetchReview(data){
      fetch('./review/addReview', {method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(data) })
      .then(res => res.json())
      .then(newReview => {if (this.onChange) this.onChange(newReview);});
    }
    render() {
    return (
    React.createElement("div", { className: 'modal fade', id: 'myModal', tabIndex: -1, role: 'dialog', 'aria-labelledby': 'label', 'aria-hidden': true },
    React.createElement("div", { className: 'modal-dialog' },
    React.createElement("div", { className: 'modal-content' },
    React.createElement("div", { className: 'modal-header h4' }, 'Leave an (anonymous)* Review',
    React.createElement("button", { className: 'close', 'data-dismiss': 'modal' },
    React.createElement('span', { 'aria-hidden': true },'Ã—'),
    React.createElement('span', { className: 'sr-only' }, 'Close'),
    ),
    ),
    React.createElement("div", { className: 'modal-body' },
    React.createElement("form", { id: 'formReview', className: 'form-horizontal', onSubmit: this.addReview.bind(this) },
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'Which term did you took the course'),
    React.createElement("select", {ref:'courseTerm', name: "courseTerm", id: 'term', required: true, className: 'form-control' },
    React.createElement("option", { value: '' }, 'Select Term'),
    React.createElement("option", { defaultValue: 'Fall' }, 'Fall'),
    React.createElement("option", { defaultValue: 'Winter' }, 'Winter'),
    React.createElement("option", { defaultValue: 'Spring' }, 'Spring'),
    React.createElement("option", { defaultValue: 'Summer' }, 'Summer'),
    ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'Things which you liked about the course'),
    React.createElement("textarea", { ref: 'coursePros', id: 'coursePros', placeholder: 'Enter pros about this course', name: 'coursePros', rows: 2, maxLength: 500, required: true, className: "form-control", defaultValue: '' }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'Things you didn\'t like about the course'),
    React.createElement("textarea", { ref: 'courseCons', id: 'courseCons', placeholder: 'Enter cons about this course', name: 'courseCons', rows: 1, maxLength: 500, required: false, className: "form-control", defaultValue: '' }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'Helpful Resources'),
    React.createElement("textarea", { ref: 'courseLinks', id: 'courseLinks', placeholder: 'Eg. Study Materials, Web pages., etc', name: 'courseLinks', rows: 1, maxLength: 500, required: false, className: "form-control", defaultValue: '' }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'What you should know before taking the course'),
    React.createElement("textarea", { ref: 'courseTips', id: 'courseTips', placeholder: 'Enter suggestions here', name: 'courseTips', rows: 1, maxLength: 500, required: false, className: "form-control", defaultValue: '' }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'Feedback or Suggestions to Improve'),
    React.createElement("textarea", { ref: 'courseFeedback', id: 'courseFeedback', placeholder: 'Enter feedback here', name: 'courseFeedback', rows: 1, maxLength: 500, required: false, className: "form-control", defaultValue: '' }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("label", {}, 'How likely are you to recommend this course to a friend or colleague?'),
    React.createElement("input", {type:'number', ref: 'courseRating', id: 'courseRating', name: 'courseRating', min: 0, max: 10, required: true, className: "form-control" }, ),
    ),
    React.createElement('div', { className: 'form-group' },
    React.createElement("button", { type: 'submit', id: 'closeModal', style: { 'float': 'right' }, className: 'btn btn-success' }, "Save"),
    ),
    ),
    ),
    //React.createElement("div", { className: 'modal-footer' },
    //React.createElement("button", { className: 'btn btn-default', 'data-dismiss': 'modal' }, 'Close'),
    //React.createElement("button", { className: 'btn btn-primary', onClick: this.save.bind(this) }, "Reset"),
    //),
    ),
    ),
    )
    )
    }
    }
    class RatingComponent extends React.Component {
    constructor(props) {
    super(props)
    this.state = Object.assign({}, { reviewCount: props.reviewCount,averageRating:props.averageRating, courseId: props.courseId,courseName:props.courseName, deptId: props.deptId });
    this.onChange = props.onChange;
    }
    componentDidMount() {
    }
    componentWillReceiveProps(nextProps) {
    //console.log(nextProps);
    if (nextProps.reviewCount !== this.props.reviewCount) {
    this.setState({ reviewCount: nextProps.reviewCount });
    }
    if (nextProps.averageRating !== this.props.averageRating) {
    this.setState({ averageRating:nextProps.averageRating });
    }
    }
    onChange1(data) {
    this.setState({ averageRating:Math.round((data.courseRating+this.state.averageRating*this.state.reviewCount)/(this.state.reviewCount+1)) });
    if (this.onChange) this.onChange(data);
    }
    render() {
    return (
    React.createElement("div", { className: 'jumbotron container', style: { backgroundColor: 'rgba(0,0,0,0.3)'} },
    React.createElement('h3', { style: { color: 'white', textAlign: 'left' } }, this.state.courseId +' - '+ this.state.courseName),
    React.createElement('h4', { style: { color: 'white', textAlign: 'left' } }, 'Overall Rating : '+Math.round(this.state.averageRating)+'/10'),
    React.createElement("br"),
    React.createElement("h4", { style: { color: 'white', float:'right' } }, 'Review Count : ' + this.state.reviewCount),
    React.createElement("div",{},
    React.createElement("button", { className: 'btn btn-success', 'data-toggle': 'modal', 'data-target': '#myModal' }, "Post a Review"),
    React.createElement(ModalComponent, { courseId: this.state.courseId, deptId: this.state.deptId, onChange1: this.onChange1.bind(this) }),
    React.createElement("br"),
    React.createElement("br"),
    React.createElement('div', {},
    React.createElement('a', { className:"h4 hello1", href: '#hello1', style: {float:'left'} }, 'View Reviews'),
    ),
    ),
    )
    )
    }
    }
    class CourseComponent extends React.Component {
    constructor(props) {
    super(props)
    this.state = Object.assign({}, { reviews: props.reviews,averageRating:props.averageRating,deptId:props.deptId,courseName:props.courseName,courseId:props.courseId });
    }
    componentDidMount() {
    this.fetchAll();
    setInterval(
    function () {
    this.fetchAll();
    }.bind(this), 30000);
    }
    componentWillUnmount(){
    clearInterval(this.interval);
    }
    fetchAll() 
    {
    fetch('./review/reviews?courseId=' + this.state.courseId)
    .then(res => res.json())
    .then(reviews => this.setState({ reviews: reviews.courseReviews,averageRating:reviews.averageRating }));
    }
    onChange(data) {
    this.setState({ reviews: this.state.reviews.concat(data) });
    }
    render() {
    if (this.state.reviews) {
    return (
    React.createElement("div", { style: { padding: '30px' } },
    React.createElement("div", { className: 'bg', id: 'changeBack' },
    React.createElement('h2', { id:'univName',style: { color: 'black', textAlign: 'center' } }, 'Oregon State University'),
    React.createElement('a', { className: 'h5 backToLink',href:"../course?deptId="+this.state.deptId, id: 'backTo', style: { color: 'brown' } }, 'Â«Back to Courses'),
    React.createElement('br'),
    React.createElement('br'),
    ),
    React.createElement(RatingComponent, { reviewCount: this.state.reviews.length,averageRating:this.state.averageRating,deptId:this.state.deptId,courseId:this.state.courseId,courseName:this.state.courseName, onChange: this.onChange.bind(this) }),
    React.createElement('br'),
    React.createElement('br'),
    React.createElement('br'),
    React.createElement('br'),
    React.createElement("div", { className: 'container' },
    React.createElement('div', { id: 'hello1',style:{display: 'block', pageBreakBefore: 'always'} },
    React.createElement('h2', { name: "hello1", style: { textAlign: 'center', color: 'white' } }, 'Course Reviews'),
    ),
    React.createElement('br'),
    React.createElement("div", { className: 'grid-container' },
    this.state.reviews.map((number) => {
    var stars = [];
    var rating = number.courseRating;
    var i = 0;
    while (i < rating) { stars.push('â˜†'); i++; };
    return React.createElement("div", { key: number._id, className: 'grid-item' },
    React.createElement("table", {},
    React.createElement("tbody", {},
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Term")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'text-display', style: { color: 'orangered' } }, number.courseTerm)
    ),
    ),
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Positives")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'positives-display' }, number.coursePros)
    ),
    ),
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Negatives")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'negatives-display' }, number.courseCons)
    ),
    ),
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Resources")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'links-display' }, number.courseLinks)
    ),
    ),
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Suggestions")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'text-display' }, number.courseTips)
    ),
    ),
    React.createElement("tr", {},
    React.createElement("td", {},
    React.createElement("label", {}, "Rating")
    ),
    React.createElement("td", {},
    React.createElement("text", { className: 'star-display' }, stars)
    ),
    ),
    ),
    ),
    )
    }
    )
    )
    )
    )
    )
    }
    }
    }
    const reviews = [];
    const averageRating=0;
    const courseId = document.getElementById('courseId').value;
    const courseName = document.getElementById('courseName').value;
    const deptId = document.getElementById('deptId').value;
    ReactDOM.render(
    React.createElement(CourseComponent, { reviews: reviews,averageRating:averageRating,courseId:courseId ,courseName:courseName,deptId:deptId}),
    document.getElementById("hello")
    );
    $("#changeBody").attr('style','background-image: url(/images/default.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:orange;');
    $("#term").change(function(){
      if ( $(this).val() === "Fall" ) { 
        $("#changeBody").attr('style','background-image: url(/images/fall.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:black;');
      }
      if( $(this).val() == "Winter" ) { 
        $("#changeBody").attr('style','background-image: url(/images/winter.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:black;');
      }
      if( $(this).val() == "Spring" ) { 
        $("#changeBody").attr('style','background-image: url(/images/spring.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:black;');
      }
      if( $(this).val() == "Summer" ) { 
        $("#changeBody").attr('style','background-image: url(/images/summer.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:black;');
      }
      if( $(this).val() == "" ) { 
        $("#changeBody").attr('style','background-image: url(/images/default.jpg);height: 100%; width: 100%; background-size:cover;margin-left:auto;margin-right:auto;');
        $("#backTo").attr('style','color:brown;');
        $("#univName").attr('style','color:orange;');

      }
    }); 
