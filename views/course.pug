extends layout

block content
    style.
        body { 
            -background: url("/images/orange.jpg") no-repeat center center fixed; 
            background-size: cover;
            height: 100%;
        }
        .grid-container {
            display: grid;
            -grid-template-columns: repeat(auto-fill, minmax(500px, 1fr));
            grid-gap: 50px;
            object-fit: cover;
            padding: 10px;
        }
        .grid-item {
            background-color: rgba(0,0,0,.2);

            border: 1px solid rgba(255, 255, 255, 0.8);
            padding: 10px;
            font-size: 20px;
            text-align: center;
            color:black;
        }
        .grid-container>a:hover {
            color: darkcyan;
            text-decoration: none;
        }
        .jumbo1 {
            background-color: rgba(192,192,192,0);
            text-align:center;
            padding:2rem 1rem;
        }
    div(style='text-align:center;margin-top:70px;')
        h2(style='color:cornsilk;text-align:center;')
        a.h5.backToLink(href="/univ/dept", style='color: brown;', id='backTo') Â«Back to Departments
    #hello
    input#dept(type='hidden', value=deptId)
    script.
        var deptId= document.getElementById("dept").value;
        class CourseComponent extends React.Component {
            constructor(props) {
                super(props);
                this.state = Object.assign({}, { courses: props.courses,search:'' });
            }
            componentDidMount() {
                this.fetchAll();
            }
            fetchAll() {
                fetch('./course/courses?deptId=' + deptId)
                .then(res => res.json())
                .then(courses => this.setState({ courses: courses }));
            }
            updateSearch(event) {
                this.setState({ search: event.target.value.substr(0, 20) });
            }
            addCourse(event) {
                event.preventDefault();
                var courseNumber = this.refs.courseNumber.value+'-'+this.refs.courseSection.value+'-'+this.refs.courseTerm.value;
                var courseName = this.refs.courseName.value;
                var checkDupCourse = true;
                this.state.courses.forEach((course)=>{
                    if (course.crsNr === courseNumber){
                        checkDupCourse = false;
                    }
                })
                if (checkDupCourse){
                    var data = { deptId:deptId, crsNr:courseNumber , crsNme: courseName };
                    this.fetchCourse(data);
                    this.refs.courseNumber.value = '';
                    this.refs.courseSection.value = '';
                    this.refs.courseTerm.value = '';
                    this.refs.courseName.value = '';
                }
            }
            fetchCourse(data){
                fetch('./course/addCourse', {method: 'POST',headers:{'Content-Type': 'application/json'},body: JSON.stringify(data) })
                .then(res => res.json())
                .then(check => {if(check.done){this.state.search='';this.fetchAll();}});
            }
            render() {
                if (this.state.courses) {
                    //const numbers = this.state.courses;
                    let courses = this.state.courses.filter(
                        (crs) => {
                        return (crs.crsNr + crs.crsNme).toLowerCase().indexOf(this.state.search.toLowerCase()) !== -1;
                        }
                    );
                    return (
                        React.createElement("div", { className: 'container' },
                            React.createElement("div", { className: 'jumbotron jumbo1' },
                                React.createElement("div", { className: 'input-group clearBack' },
                                    React.createElement("input", { className: 'form-control', value: this.state.search, onChange: this.updateSearch.bind(this), placeholder: 'Search by Course',autoFocus:'focus' }),
                                    React.createElement("span", { className: 'input-group-addon'},
                                        React.createElement("i", { className: 'fa fa-search'},),
                                    ),
                                ),
                            ),
                            React.createElement("div", { className: 'grid-container' },
                                courses.map((number) => {
                                    return React.createElement("a", { key: number.crsNr, className: 'grid-item', href: './course/review?courseId=' + deptId+number.crsNr+'&courseName='+number.crsNme+'&deptId='+deptId }, number.crsNr + " - " + number.crsNme)
                                })
                            ),
                            React.createElement("br"),
                            React.createElement("div", { className: 'jumbotron jumbo1' },
                                React.createElement("h4",{style:{color:'red'}},"Didn't find your course?"),
                                React.createElement("br"),
                                React.createElement("form", {className:'form-inline block', onSubmit: this.addCourse.bind(this),style:{margin:'15px'} },
                                    React.createElement("input", { type: 'text',className:'form-control', ref: 'courseNumber',pattern:'[0-9]{3}',maxLength:3, required: true, placeholder: 'Enter course number  (xxx)' }),
                                    React.createElement("input", { type: 'text',className:'form-control', ref: 'courseSection',pattern:'[0-9]{3}',maxLength:3, required: true, placeholder: 'Enter section  (xxx)' }),
                                    React.createElement("input", { type: 'text',className:'form-control', ref: 'courseTerm',pattern:'(F|W|Sp|Su)[0,1]{1}[0-8]{1}',maxLength:4, required: true, placeholder: 'Ex: W18, F17, Sp16, Su15 ' }),
                                    React.createElement("input", { type: 'text',className:'form-control mr-sm-4', ref: 'courseName',maxLength:350, required: true, placeholder: 'Enter course name' }),
                                    React.createElement("button", { type: 'submit',className:'form-control btn btn-success', }, "Add a Course"),
                                ),
                            ),
                        )
                    )
                }
            }
        }
        const courses = []
        ReactDOM.render(
            React.createElement(CourseComponent, { courses: courses }),
            document.getElementById("hello")
        );
